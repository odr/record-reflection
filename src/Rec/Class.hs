{-# LANGUAGE UndecidableInstances #-}
module Rec.Class where

import Control.Lens
import GHC.TypeLits


type family TCons r :: [Symbol]

type family Ind (x::Symbol) (xs::[Symbol]) :: Nat where
  Ind x (x ': xs) = 1
  Ind x (y ': xs) = 1 + Ind x xs

class CRecCon (c :: Symbol) r where
  type TRecCon c r
  type TFlds c r :: [Symbol] -- "1","2",... if unnamed
  fromCon :: TRecCon c r -> r
  toCon   :: r -> Maybe (TRecCon c r)

-- | Get contructor-prism by name.
--
-- The type 'TRecCon' is generated by TH as Tuple.
--
-- Tuple has to have not more than 32 fields (Look at "Rec.Tuples.Inst").
--
-- In case of constructor with one field we got just this value.
rc :: forall con r. CRecCon con r => Prism' r (TRecCon con r)
rc = prism' (fromCon @con) (toCon @con)

type TConFldNum c f r = Ind f (TFlds c r)

type family TFldNum (s :: Symbol) r :: Nat
-- ^ For one-constructor case

class CRecFld fld r where
  type TRecFld fld r
  getFld :: r -> TRecFld fld r
  setFld :: r -> TRecFld fld r -> r

-- UndecidableInstances
instance CRecFld (TFldNum s r) r => CRecFld (s :: Symbol) r where
  type TRecFld s r = TRecFld (TFldNum s r) r
  getFld = getFld @(TFldNum s r)
  setFld = setFld @(TFldNum s r)

-- | Get field-lens by name or number from type with one constructor
rf :: forall fld r. CRecFld fld r => Lens' r (TRecFld fld r)
rf = lens (getFld @fld) (setFld @fld)

-- | Get field-traversal by name of constructor and number of field
rcfn
  :: forall c (f::Nat) r. (CRecCon c r, CRecFld f (TRecCon c r))
  => Traversal' r (TRecFld f (TRecCon c r))
rcfn = rc @c . rf @f

-- | Get field-traversal by name of constructor and name of field
rcf
  :: forall c (f::Symbol) r
  . (CRecCon c r, CRecFld (TConFldNum c f r) (TRecCon c r))
  => Traversal' r (TRecFld (TConFldNum c f r) (TRecCon c r))
rcf = rc @c . rf @(TConFldNum c f r)
